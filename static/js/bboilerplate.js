// Generated by CoffeeScript 1.3.3
(function() {
  var BBoilerplate, build_views, resolve_ref, safebind, uniqueId,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (this.BBoilerplate) {
    BBoilerplate = this.BBoilerplate;
  } else {
    BBoilerplate = {};
    this.BBoilerplate = BBoilerplate;
  }

  uniqueId = function(prefix) {
    var hexDigits, i, s, uuid, _i, _len, _ref;
    s = [];
    hexDigits = "0123456789ABCDEF";
    _ref = _.range(32);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[12] = "4";
    s[16] = hexDigits.substr((s[16] & 0x3) | 0x8, 1);
    uuid = s.join("");
    return prefix + "-" + uuid;
  };

  BBoilerplate.uniqueId = uniqueId;

  safebind = function(binder, target, event, callback) {
    var _this = this;
    if (!_.has(binder, 'eventers')) {
      binder['eventers'] = {};
    }
    binder['eventers'][target.id] = target;
    target.on(event, callback, binder);
    target.on('destroy remove', function() {
      return delete binder['eventers'][target];
    }, binder);
    return null;
  };

  BBoilerplate.safebind = safebind;

  resolve_ref = function(collection_ref, id) {
    var collection, model;
    collection = BBoilerplate.get_collection(collection_ref);
    try {
      model = collection.get(id);
    } catch (error) {
      console.log(collection_ref, id);
    }
    return model;
  };

  BBoilerplate.get_collection = function(names) {
    var last, n, _i, _len;
    last = window;
    for (_i = 0, _len = names.length; _i < _len; _i++) {
      n = names[_i];
      last = last[n];
    }
    return last;
  };

  BBoilerplate.HasProperties = (function(_super) {

    __extends(HasProperties, _super);

    function HasProperties() {
      return HasProperties.__super__.constructor.apply(this, arguments);
    }

    HasProperties.prototype.collection_ref = null;

    HasProperties.prototype.get_collection_ref = function() {
      var collection_ref;
      collection_ref = this.get('collection_ref');
      if (collection_ref) {
        return collection_ref;
      } else {
        return this.collection_ref;
      }
    };

    HasProperties.prototype.destroy = function(options) {
      var target, val, _ref, _results;
      HasProperties.__super__.destroy.call(this, options);
      if (_.has(this, 'eventers')) {
        _ref = this.eventers;
        _results = [];
        for (target in _ref) {
          if (!__hasProp.call(_ref, target)) continue;
          val = _ref[target];
          _results.push(val.off(null, null, this));
        }
        return _results;
      }
    };

    HasProperties.prototype.isNew = function() {
      return !this.get('created');
    };

    HasProperties.prototype.initialize = function(attrs, options) {
      var _this = this;
      if (!attrs) {
        attrs = {};
      }
      if (!options) {
        options = {};
      }
      HasProperties.__super__.initialize.call(this, attrs, options);
      this.properties = {};
      this.property_cache = {};
      if (!_.has(attrs, 'id')) {
        this.id = BBoilerplate.uniqueId(this.type);
        this.attributes['id'] = this.id;
      }
      return _.defer(function() {
        if (!_this.inited) {
          return _this.dinitialize(attrs, options);
        }
      });
    };

    HasProperties.prototype.dinitialize = function(attrs, options) {
      return this.inited = true;
    };

    HasProperties.prototype.set = function(key, value, options) {
      var attrs, toremove, val, _i, _len;
      if (_.isObject(key) || key === null) {
        attrs = key;
        options = value;
      } else {
        attrs = {};
        attrs[key] = value;
      }
      toremove = [];
      for (key in attrs) {
        if (!__hasProp.call(attrs, key)) continue;
        val = attrs[key];
        if (_.has(this, 'properties') && _.has(this.properties, key) && this.properties[key]['setter']) {
          this.properties[key]['setter'].call(this, val);
          toremove.push(key);
        }
      }
      for (_i = 0, _len = toremove.length; _i < _len; _i++) {
        key = toremove[_i];
        delete attrs[key];
      }
      if (!_.isEmpty(attrs)) {
        return HasProperties.__super__.set.call(this, attrs, options);
      }
    };

    HasProperties.prototype.add_dependencies = function(prop_name, object, fields) {
      var fld, prop_spec, _i, _len, _results;
      if (!_.isArray(fields)) {
        fields = [fields];
      }
      prop_spec = this.properties[prop_name];
      prop_spec.dependencies = prop_spec.dependencies.concat({
        obj: object,
        fields: fields
      });
      _results = [];
      for (_i = 0, _len = fields.length; _i < _len; _i++) {
        fld = fields[_i];
        _results.push(safebind(this, object, "change:" + fld, prop_spec['callbacks']['changedep']));
      }
      return _results;
    };

    HasProperties.prototype.register_setter = function(prop_name, setter) {
      var prop_spec;
      prop_spec = this.properties[prop_name];
      return prop_spec.setter = setter;
    };

    HasProperties.prototype.register_property = function(prop_name, getter, use_cache) {
      var changedep, prop_spec, propchange,
        _this = this;
      if (_.isUndefined(use_cache)) {
        use_cache = true;
      }
      if (_.has(this.properties, prop_name)) {
        this.remove_property(prop_name);
      }
      changedep = function() {
        return _this.trigger('changedep:' + prop_name);
      };
      propchange = function() {
        var firechange, new_val, old_val;
        firechange = true;
        if (prop_spec['use_cache']) {
          old_val = _this.get_cache(prop_name);
          _this.clear_cache(prop_name);
          new_val = _this.get(prop_name);
          firechange = new_val !== old_val;
        }
        if (firechange) {
          _this.trigger('change:' + prop_name, _this, _this.get(prop_name));
          return _this.trigger('change', _this);
        }
      };
      prop_spec = {
        'getter': getter,
        'dependencies': [],
        'use_cache': use_cache,
        'setter': null,
        'callbacks': {
          changedep: changedep,
          propchange: propchange
        }
      };
      this.properties[prop_name] = prop_spec;
      safebind(this, this, "changedep:" + prop_name, prop_spec['callbacks']['propchange']);
      return prop_spec;
    };

    HasProperties.prototype.remove_property = function(prop_name) {
      var dep, dependencies, fld, obj, prop_spec, _i, _j, _len, _len1, _ref;
      prop_spec = this.properties[prop_name];
      dependencies = prop_spec.dependencies;
      for (_i = 0, _len = dependencies.length; _i < _len; _i++) {
        dep = dependencies[_i];
        obj = dep.obj;
        _ref = dep['fields'];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          fld = _ref[_j];
          obj.off('change:' + fld, prop_spec['callbacks']['changedep'], this);
        }
      }
      this.off("changedep:" + dep);
      delete this.properties[prop_name];
      if (prop_spec.use_cache) {
        return this.clear_cache(prop_name);
      }
    };

    HasProperties.prototype.has_cache = function(prop_name) {
      return _.has(this.property_cache, prop_name);
    };

    HasProperties.prototype.add_cache = function(prop_name, val) {
      return this.property_cache[prop_name] = val;
    };

    HasProperties.prototype.clear_cache = function(prop_name, val) {
      return delete this.property_cache[prop_name];
    };

    HasProperties.prototype.get_cache = function(prop_name) {
      return this.property_cache[prop_name];
    };

    HasProperties.prototype.get = function(prop_name) {
      var computed, getter, prop_spec;
      if (_.has(this.properties, prop_name)) {
        prop_spec = this.properties[prop_name];
        if (prop_spec.use_cache && this.has_cache(prop_name)) {
          return this.property_cache[prop_name];
        } else {
          getter = prop_spec.getter;
          computed = getter.apply(this, this);
          if (this.properties[prop_name].use_cache) {
            this.add_cache(prop_name, computed);
          }
          return computed;
        }
      } else {
        return HasProperties.__super__.get.call(this, prop_name);
      }
    };

    HasProperties.prototype.ref = function() {
      return {
        id: this.id,
        collection: this.get_collection_ref()
      };
    };

    HasProperties.prototype.resolve_ref = function(ref) {
      if (!ref) {
        console.log('ERROR, null reference');
      }
      if (ref.collection === this.get_collection_ref() && ref.id === this.id) {
        return this;
      } else {
        return resolve_ref(ref.collection, ref['id']);
      }
    };

    HasProperties.prototype.get_ref = function(ref_name) {
      var ref;
      ref = this.get(ref_name);
      if (ref) {
        return this.resolve_ref(ref);
      }
    };

    HasProperties.prototype.url = function() {
      var base;
      base = "/cdx/bb/" + Continuum.docid + "/" + this.type + "/";
      if (this.isNew()) {
        return base;
      }
      return base + this.get('id');
    };

    HasProperties.prototype.sync = function(method, model, options) {
      return options.success(model);
    };

    HasProperties.prototype.defaults = {};

    return HasProperties;

  })(Backbone.Model);

  BBoilerplate.BasicView = (function(_super) {

    __extends(BasicView, _super);

    function BasicView() {
      return BasicView.__super__.constructor.apply(this, arguments);
    }

    BasicView.prototype.initialize = function(options) {
      if (!_.has(options, 'id')) {
        return this.id = BBoilerplate.uniqueId('BasicView');
      }
    };

    BasicView.prototype.remove = function() {
      var target, val, _ref;
      if (_.has(this, 'eventers')) {
        _ref = this.eventers;
        for (target in _ref) {
          if (!__hasProp.call(_ref, target)) continue;
          val = _ref[target];
          val.off(null, null, this);
        }
      }
      this.trigger('remove');
      return BasicView.__super__.remove.call(this);
    };

    BasicView.prototype.mget = function() {
      return this.model.get.apply(this.model, arguments);
    };

    BasicView.prototype.mset = function() {
      return this.model.set.apply(this.model, arguments);
    };

    BasicView.prototype.mget_ref = function(fld) {
      return this.model.get_ref(fld);
    };

    return BasicView;

  })(Backbone.View);

  build_views = function(view_storage, model_refs, view_generator) {
    var created_views, generator, generator_is_array, idx, key, newview, spec, valid_viewmodels, value, _i, _j, _len, _len1;
    created_views = [];
    valid_viewmodels = {};
    for (_i = 0, _len = model_refs.length; _i < _len; _i++) {
      spec = model_refs[_i];
      valid_viewmodels[spec.id] = true;
    }
    generator_is_array = _.isArray(view_generator);
    for (idx = _j = 0, _len1 = model_refs.length; _j < _len1; idx = ++_j) {
      spec = model_refs[idx];
      if (view_storage[spec.id]) {
        continue;
      }
      if (generator_is_array) {
        generator = view_generator[idx];
      } else {
        generator = view_generator;
      }
      newview = generator(spec);
      view_storage[spec.id] = newview;
      created_views.push(view_storage[spec.id]);
    }
    for (key in view_storage) {
      if (!__hasProp.call(view_storage, key)) continue;
      value = view_storage[key];
      if (!valid_viewmodels[key]) {
        value.remove();
        delete view_storage[key];
      }
    }
    return created_views;
  };

  BBoilerplate.build_views = build_views;

}).call(this);
