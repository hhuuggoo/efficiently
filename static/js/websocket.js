// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BBoilerplate.WebSocketWrapper = (function() {

    _.extend(WebSocketWrapper.prototype, Backbone.Events);

    WebSocketWrapper.prototype.connect = function() {
      var _this = this;
      this._connected = $.Deferred();
      this.connected = this._connected.promise();
      try {
        this.s = new WebSocket(this.ws_conn_string);
      } catch (error) {
        this.s = new MozWebSocket(this.ws_conn_string);
      }
      this.s.onopen = function() {
        _this._connected.resolve();
        return _this.trigger('open');
      };
      this.s.onmessage = this.onmessage;
      return this.s.onclose = function() {
        return _this.trigger('close');
      };
    };

    function WebSocketWrapper(ws_conn_string) {
      this.onmessage = __bind(this.onmessage, this);

      this.connect = __bind(this.connect, this);
      this.ws_conn_string = ws_conn_string;
      this.connect();
      return this;
    }

    WebSocketWrapper.prototype.onmessage = function(msg) {
      var data, index, topic;
      data = msg.data;
      index = data.indexOf(":");
      index = data.indexOf(":", index + 1);
      topic = data.substring(0, index);
      data = data.substring(index + 1);
      this.trigger("msg:" + topic, data);
      return null;
    };

    return WebSocketWrapper;

  })();

}).call(this);
