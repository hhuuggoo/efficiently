// Generated by CoffeeScript 1.6.3
(function() {
  var Efficiently, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (this.Efficiently) {
    Efficiently = this.Efficiently;
  } else {
    Efficiently = {};
    this.Efficiently = Efficiently;
  }

  Efficiently.EfficientlyModel = (function(_super) {
    __extends(EfficientlyModel, _super);

    function EfficientlyModel() {
      _ref = EfficientlyModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    EfficientlyModel.prototype.url = function() {
      return EfficientlyModel.__super__.url.call(this);
    };

    return EfficientlyModel;

  })(BBoilerplate.HasProperties);

  Efficiently.BasicNodeView = (function(_super) {
    __extends(BasicNodeView, _super);

    function BasicNodeView() {
      this.render_hidden = __bind(this.render_hidden, this);
      _ref1 = BasicNodeView.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    BasicNodeView.prototype.initialize = function(options) {
      BasicNodeView.__super__.initialize.call(this, options);
      this.viewstate = options.viewstate;
      this.docview = options.docview;
      options.nodeview = this;
      console.log('node');
      this.contentview = new Efficiently.BasicNodeContentView(options);
      console.log('content');
      this.childrenview = new Efficiently.BasicChildrenView(options);
      console.log('children');
      this.docview.register(this.model.id, this, this.viewstate);
      return this.render();
    };

    BasicNodeView.prototype.remove = function() {
      this.docview.deregister(this, this.viewstate);
      return BasicNodeView.__super__.remove.call(this);
    };

    BasicNodeView.prototype.tree_apply = function(func, level) {
      var child, childid, children, newlevel, _i, _len;
      func(this);
      if (level > 0) {
        newlevel = level - 1;
      } else if (_.isNull(level)) {
        newlevel = null;
      } else {
        return null;
      }
      children = this.get('children');
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        childid = children[_i];
        child = this.collection.get(childid);
        child.tree_apply(func, newlevel);
      }
      return null;
    };

    BasicNodeView.prototype.delegateEvents = function(events) {
      BasicNodeView.__super__.delegateEvents.call(this, events);
      BBoilerplate.safebind(this, this.model, "destroy", this.destroy);
      BBoilerplate.safebind(this, this.model, "change:children", this.render);
      BBoilerplate.safebind(this, this.viewstate, "change:outline", this.render_outline);
      BBoilerplate.safebind(this, this.viewstate, "change:all_hidden", this.render);
      BBoilerplate.safebind(this, this.viewstate, "change:hide", this.render_hidden);
      return this;
    };

    BasicNodeView.prototype.render_outline = function() {
      var outline_state;
      outline_state = this.viewstate.get('outline');
      if (outline_state === 'show_children') {
        this.docview.show_children(this.model);
      }
      if (outline_state === 'show_all') {
        this.docview.show_all_children(this.model);
      }
      if (outline_state === 'hide_all') {
        this.docview.hide_all_children(this.model);
      }
      return this.docview.getview(this.model.id).render();
    };

    BasicNodeView.prototype.make_view = function(model, options) {
      var view, viewstate;
      options = options || {};
      options = _.extend({}, options);
      viewstate = new Efficiently.OutlineViewState();
      options.model = model;
      options.viewstate = viewstate;
      options.docview = this.docview;
      view = new Efficiently.BasicNodeView(options);
      return view;
    };

    BasicNodeView.prototype.render_hidden = function() {
      if (this.viewstate.get('hide')) {
        return this.$el.addClass('hide');
      } else {
        return this.$el.removeClass('hide');
      }
    };

    BasicNodeView.prototype.render = function() {
      this.contentview.$el.detach();
      this.childrenview.$el.detach();
      this.$el.addClass('outline');
      this.$el.addClass('clearfix');
      this.$el.append(this.contentview.$el);
      this.$el.append(this.childrenview.$el);
      if (this.docview.children(this.model, true).length === 0) {
        this.childrenview.$el.addClass('hide');
      } else {
        this.childrenview.$el.removeClass('hide');
      }
      return this.render_hidden();
    };

    BasicNodeView.prototype.remove = function() {
      this.contentview.remove();
      this.childrenview.remove();
      return BasicNodeView.__super__.remove.call(this);
    };

    BasicNodeView.prototype.nodetext = function() {
      if (this.viewstate.get('edit')) {
        this.contentview.save();
      }
      return this.mget('text');
    };

    BasicNodeView.prototype.getview = function(id) {
      return this.docview.nodeviews[id];
    };

    BasicNodeView.prototype.getviewstate = function(id) {
      return this.docview.viewstates[id];
    };

    return BasicNodeView;

  })(BBoilerplate.BasicView);

  Efficiently.OutlineViewState = (function(_super) {
    __extends(OutlineViewState, _super);

    function OutlineViewState() {
      this.toggle_outline_state = __bind(this.toggle_outline_state, this);
      _ref2 = OutlineViewState.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    OutlineViewState.prototype.outline_states = ['hide_all', 'show_children', 'show_all'];

    OutlineViewState.prototype.defaults = {
      hide: false,
      edit: false,
      select: false,
      outline: 'show_all'
    };

    OutlineViewState.prototype.toggle_outline_state = function() {
      var outline_state;
      outline_state = this.get('outline');
      if (outline_state === 'hide_all') {
        this.set('outline', 'show_children');
      } else if (outline_state === 'show_children') {
        this.set('outline', 'show_all');
      } else {
        this.set('outline', 'hide_all');
      }
      console.log('setting', outline_state, this.get('outline'));
      return null;
    };

    OutlineViewState.prototype.initialize = function(attrs, options) {
      OutlineViewState.__super__.initialize.call(this, attrs, options);
      this.register_property('all_hidden', function() {
        return _.all(this.get('children_hide_status'), function(x) {
          return x;
        });
      }, true);
      this.add_dependencies('all_hidden', this, 'children_hide_status');
      this.register_property('any_hidden', function() {
        return _.any(this.get('children_hide_status'), function(x) {
          return x;
        });
      }, true);
      return this.add_dependencies('any_hidden', this, 'children_hide_status');
    };

    OutlineViewState.prototype.set_child_viewstates = function(child_viewstates) {
      var viewstate, _i, _len;
      this.register_property('children_hide_status', function() {
        return _.map(child_viewstates, (function(model) {
          return model.get('hide');
        }));
      }, null, true);
      for (_i = 0, _len = child_viewstates.length; _i < _len; _i++) {
        viewstate = child_viewstates[_i];
        this.add_dependencies('children_hide_status', viewstate, 'hide');
      }
      this.trigger("change:children_hide_status");
      return this.trigger("change");
    };

    return OutlineViewState;

  })(Efficiently.EfficientlyModel);

  Efficiently.KeyEventer = (function(_super) {
    __extends(KeyEventer, _super);

    function KeyEventer() {
      this.modenter = __bind(this.modenter, this);
      this.enter = __bind(this.enter, this);
      this.cursor_up = __bind(this.cursor_up, this);
      this.cursor_down = __bind(this.cursor_down, this);
      this.select_first_node = __bind(this.select_first_node, this);
      this.deletenode = __bind(this.deletenode, this);
      this.nearest_visible_node = __bind(this.nearest_visible_node, this);
      this.deletekey = __bind(this.deletekey, this);
      this.moveleft = __bind(this.moveleft, this);
      this.moveright = __bind(this.moveright, this);
      this.movedown = __bind(this.movedown, this);
      this.moveup = __bind(this.moveup, this);
      this.toggle_outline = __bind(this.toggle_outline, this);
      this.toggle_outline_global = __bind(this.toggle_outline_global, this);
      this.toggle_todo = __bind(this.toggle_todo, this);
      this.get_keyfunction = __bind(this.get_keyfunction, this);
      this.filter = __bind(this.filter, this);
      this.exitfilter = __bind(this.exitfilter, this);
      this.enterfilter = __bind(this.enterfilter, this);
      this.exitisearch = __bind(this.exitisearch, this);
      this.enterisearch = __bind(this.enterisearch, this);
      this.get_filterkeyfunction = __bind(this.get_filterkeyfunction, this);
      this.isearch_up = __bind(this.isearch_up, this);
      this.isearch_down = __bind(this.isearch_down, this);
      this.isearch = __bind(this.isearch, this);
      this.focus_isearch = __bind(this.focus_isearch, this);
      this.get_isearchkeyfunction = __bind(this.get_isearchkeyfunction, this);
      this.keydown = __bind(this.keydown, this);
      this.keyup = __bind(this.keyup, this);
      this.nsmodified = __bind(this.nsmodified, this);
      this.modified = __bind(this.modified, this);
      _ref3 = KeyEventer.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    KeyEventer.prototype.keycodes = {
      UP: 38,
      DOWN: 40,
      LEFT: 37,
      RIGHT: 39,
      ENTER: 13,
      TAB: 9,
      GT: 190,
      LT: 188,
      SLASH: 191,
      S_KEY: 83,
      F_KEY: 70,
      R_KEY: 82,
      P_KEY: 80,
      L_BRACKET: 219,
      R_BRACKET: 221,
      BACKSPACE: 8,
      DELETE: 46,
      O_KEY: 79,
      ESC: 27
    };

    KeyEventer.prototype.initialize = function(options) {
      KeyEventer.__super__.initialize.call(this, options);
      this.docview = options.docview;
      return this.keycodes = Efficiently.KeyEventer.prototype.keycodes;
    };

    KeyEventer.prototype.delegateEvents = function(events) {
      KeyEventer.__super__.delegateEvents.call(this, events);
      this.docview.$el.bind('keydown.keyeventer', this.keydown);
      this.docview.$el.bind('keyup.keyeventer', this.keyup);
      return this;
    };

    KeyEventer.prototype.undelegateEvents = function(events) {
      KeyEventer.__super__.undelegateEvents.call(this, events);
      return $(document).unbind('keydown.keyeventer');
    };

    KeyEventer.prototype.modified = function(e) {
      return e.ctrlKey || e.shiftKey || e.altKey;
    };

    KeyEventer.prototype.nsmodified = function(e) {
      return e.ctrlKey || e.altKey;
    };

    KeyEventer.prototype.keyup = function(e) {
      if (this.docview.currview() && this.docview.currview().contentview) {
        return this.docview.currview().contentview.save();
      }
    };

    KeyEventer.prototype.keydown = function(e) {
      var func;
      if (this.docview.ui_state === 'normal') {
        func = this.get_keyfunction(e);
      } else if (this.docview.ui_state === 'filter') {
        func = this.get_filterkeyfunction(e);
      } else if (this.docview.ui_state === 'isearch') {
        func = this.get_isearchkeyfunction(e);
      }
      if (func) {
        return func(e);
      } else {
        return true;
      }
    };

    KeyEventer.prototype.get_isearchkeyfunction = function(e) {
      var modified, nsmodified,
        _this = this;
      modified = this.modified(e);
      nsmodified = this.nsmodified(e);
      if (e.keyCode === this.keycodes.ESC) {
        return this.exitisearch;
      }
      if (nsmodified && e.keyCode === this.keycodes.R_BRACKET) {
        return (function() {
          return _this.isearch('down', true);
        });
      }
      if (nsmodified && e.keyCode === this.keycodes.L_BRACKET) {
        return (function() {
          return _this.isearch('up', true);
        });
      }
    };

    KeyEventer.prototype.focus_isearch = function(e) {
      $('#searchbox').fadeIn(300);
      console.log('focus isearch');
      return $('#searchtext').focus();
    };

    KeyEventer.prototype.isearch = function(direction, findnext) {
      var currpoint, endidx, newidx, newnode, node, result, searchtxt, textarea;
      if (!this.docview.currnode || this.docview.currviewstate().get('hide')) {
        this.select_first_node();
        $('#searchtext').focus();
      }
      node = this.docview.currnode;
      searchtxt = $('#searchtext').val();
      textarea = this.docview.nodeviews[node.id].$el.find('.outline-input')[0];
      if (direction === 'down') {
        currpoint = textarea.selectionEnd;
        result = this.isearch_down(node, searchtxt, currpoint);
      } else {
        currpoint = textarea.selectionStart - 1;
        result = this.isearch_up(node, searchtxt, currpoint);
      }
      if (result) {
        newnode = result[0], newidx = result[1], endidx = result[2];
        if (newnode !== this.docview.currnode) {
          this.docview.select(newnode);
        }
        textarea = this.docview.nodeviews[newnode.id].$el;
        textarea = textarea.find('.outline-input')[0];
        textarea.setSelectionRange(newidx, endidx);
      }
      return null;
    };

    KeyEventer.prototype.isearch_down = function(node, searchtxt, currpoint) {
      var currtxt, newidx, newnode;
      if (_.isUndefined(currpoint)) {
        currpoint = 0;
      }
      currtxt = this.docview.nodeviews[node.id].nodetext();
      if (searchtxt === searchtxt.toLowerCase()) {
        currtxt = currtxt.toLowerCase();
      }
      newidx = currtxt.indexOf(searchtxt, currpoint);
      if (newidx >= 0) {
        return [node, newidx, newidx + searchtxt.length];
      } else {
        newnode = this.docview.lower_node(node, true);
        if (newnode) {
          return this.isearch_down(newnode, searchtxt, 0);
        }
      }
      return false;
    };

    KeyEventer.prototype.isearch_up = function(node, searchtxt, currpoint) {
      var currtxt, newidx, newnode;
      currtxt = this.docview.nodeviews[node.id].nodetext();
      if (_.isUndefined(currpoint)) {
        currpoint = currtxt.length;
      }
      if (searchtxt === searchtxt.toLowerCase()) {
        currtxt = currtxt.toLowerCase();
      }
      if (currpoint >= 0) {
        newidx = currtxt.lastIndexOf(searchtxt, currpoint);
      } else {
        newidx = -1;
      }
      if (newidx >= 0) {
        return [node, newidx, newidx + searchtxt.length];
      } else {
        newnode = this.docview.upper_node(node, true);
        if (newnode) {
          return this.isearch_up(newnode, searchtxt);
        }
      }
      return false;
    };

    KeyEventer.prototype.get_filterkeyfunction = function(e) {
      var modified, nsmodified;
      modified = this.modified(e);
      nsmodified = this.nsmodified(e);
      if (!modified && e.keyCode === this.keycodes.ENTER) {
        return this.filter;
      }
      if (!modified && e.keyCode === this.keycodes.DOWN) {
        return this.exitfilter;
      }
      if (!modified && e.keyCode === this.keycodes.ESC) {
        return this.exitfilter;
      } else {
        return null;
      }
    };

    KeyEventer.prototype.enterisearch = function(e) {
      this.docview.ui_state = 'isearch';
      return this.focus_isearch(e);
    };

    KeyEventer.prototype.exitisearch = function(e) {
      this.docview.ui_state = 'normal';
      $('#searchbox').fadeOut(300);
      if (this.docview.currnode) {
        return this.docview.select(this.docview.currnode);
      }
    };

    KeyEventer.prototype.enterfilter = function(e) {
      return this.docview.$el.find(".filter").focus();
    };

    KeyEventer.prototype.exitfilter = function(e) {
      this.docview.$el.find(".filter").blur();
      return this.docview.select(this.docview.currnode);
    };

    KeyEventer.prototype.filter = function(e) {
      e.preventDefault();
      Efficiently.tree_filter(this.docview.filterexpression(), this.docview);
      return false;
    };

    KeyEventer.prototype.get_keyfunction = function(e) {
      var modified, nsmodified;
      modified = this.modified(e);
      nsmodified = this.nsmodified(e);
      if (!modified && e.keyCode === this.keycodes.DOWN) {
        return this.cursor_down;
      }
      if (!modified && e.keyCode === this.keycodes.UP) {
        return this.cursor_up;
      }
      if (!modified && e.keyCode === this.keycodes.ENTER) {
        return this.enter;
      }
      if (modified && e.keyCode === this.keycodes.ENTER) {
        return this.modenter;
      }
      if (modified && e.keyCode === this.keycodes.ENTER) {
        return this.modenter;
      }
      if (modified && e.keyCode === this.keycodes.BACKSPACE) {
        return this.deletenode;
      }
      if (!modified && e.keyCode === this.keycodes.BACKSPACE) {
        return this.deletekey;
      }
      if (e.keyCode === this.keycodes.DELETE) {
        return this.deletenode;
      }
      if (modified && e.keyCode === this.keycodes.RIGHT) {
        return this.moveright;
      }
      if (modified && e.keyCode === this.keycodes.LEFT) {
        return this.moveleft;
      }
      if (modified && e.keyCode === this.keycodes.UP) {
        return this.moveup;
      }
      if (modified && e.keyCode === this.keycodes.DOWN) {
        return this.movedown;
      }
      if (nsmodified && e.keyCode === this.keycodes.GT) {
        return this.toggle_outline;
      }
      if (nsmodified && e.keyCode === this.keycodes.SLASH) {
        return this.toggle_outline_global;
      }
      if (nsmodified && e.keyCode === this.keycodes.LT) {
        return this.toggle_todo;
      }
      if (nsmodified && e.keyCode === this.keycodes.O_KEY) {
        return this.enterfilter;
      }
      if (nsmodified && e.keyCode === this.keycodes.R_BRACKET) {
        return this.enterisearch;
      }
      if (nsmodified && e.keyCode === this.keycodes.L_BRACKET) {
        return this.enterisearch;
      }
      return null;
    };

    KeyEventer.prototype.toggle_todo = function(e) {
      return this.docview.currview().model.toggle_todo_state();
    };

    KeyEventer.prototype.toggle_outline_global = function(e) {
      var child, nextnode, _i, _len, _ref4;
      if (this.docview.outline_state === 'hide_all') {
        this.docview.outline_state = 'show_children';
      } else if (this.docview.outline_state === 'show_children') {
        this.docview.outline_state = 'show_all';
      } else {
        this.docview.outline_state = 'hide_all';
      }
      _ref4 = this.docview.children(this.docview.model, false);
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        child = _ref4[_i];
        this.docview.getviewstate(child.id).set('outline', this.docview.outline_state);
      }
      if (!this.docview.currview().viewstate.get('hide')) {
        this.docview.select(this.docview.currnode);
      } else {
        nextnode = this.nearest_visible_node();
        if (nextnode) {
          this.docview.select(this.docview.currnode);
        }
      }
      return false;
    };

    KeyEventer.prototype.toggle_outline = function(e) {
      this.docview.currview().viewstate.toggle_outline_state();
      this.docview.select(this.docview.currnode);
      return false;
    };

    KeyEventer.prototype.moveup = function(e) {
      var curridx, parent;
      parent = this.docview.currnode.parent();
      curridx = parent.child_index(this.docview.currnode);
      if (curridx === 0) {
        return false;
      } else {
        parent.reorder_child(this.docview.currnode, curridx - 1);
        this.docview.select(this.docview.currnode);
        return false;
      }
    };

    KeyEventer.prototype.movedown = function(e) {
      var curridx, parent;
      parent = this.docview.currnode.parent();
      curridx = parent.child_index(this.docview.currnode);
      if (curridx === parent.num_children()) {
        return false;
      } else {
        parent.reorder_child(this.docview.currnode, curridx + 1);
        this.docview.select(this.docview.currnode);
        return false;
      }
    };

    KeyEventer.prototype.moveright = function(e) {
      var parent, upper_sibling;
      parent = this.docview.currnode.parent();
      upper_sibling = this.docview.upper_sibling(this.docview.currnode, true);
      if (upper_sibling !== parent && upper_sibling) {
        this.docview.currview().contentview.save();
        parent.remove_child(this.docview.currnode);
        upper_sibling.add_child(this.docview.currnode);
      }
      this.docview.select(this.docview.currnode);
      return false;
    };

    KeyEventer.prototype.moveleft = function(e) {
      var curridx, grandparent, parent;
      parent = this.docview.currnode.parent();
      if (!parent) {
        return false;
      }
      grandparent = parent.parent();
      if (!grandparent) {
        return false;
      }
      this.docview.currview().contentview.save();
      curridx = grandparent.child_index(parent);
      parent.remove_child(this.docview.currnode);
      grandparent.add_child(this.docview.currnode, curridx + 1);
      this.docview.select(this.docview.currnode);
      return false;
    };

    KeyEventer.prototype.deletekey = function(e) {
      if (!this.docview.nodeviews[this.docview.currnode.id].nodetext()) {
        return this.deletenode(e);
      }
      return true;
    };

    KeyEventer.prototype.nearest_visible_node = function() {
      var nextnode;
      nextnode = this.docview.upper_node(this.docview.currnode, true);
      if (!nextnode || nextnode === this.docview.model) {
        nextnode = this.docview.lower_node(this.docview.currnode, true);
      }
      return nextnode;
    };

    KeyEventer.prototype.deletenode = function(e) {
      var nextnode, parent;
      if (this.docview.model.children().length === 1 && this.docview.model.children()[0] === this.docview.currnode) {
        return false;
      }
      nextnode = this.nearest_visible_node();
      parent = this.docview.currnode.parent();
      parent.remove_child(this.docview.currnode);
      this.docview.currnode.del();
      this.docview.unselect();
      if (nextnode) {
        this.docview.select(nextnode, true);
      }
      return false;
    };

    KeyEventer.prototype.select_first_node = function() {
      return this.docview.select(this.docview.children(this.docview.root, true)[0], true);
    };

    KeyEventer.prototype.cursor_down = function() {
      var newnode;
      if (!this.docview.currnode || this.docview.currviewstate().get('hide')) {
        this.select_first_node();
      } else {
        newnode = this.docview.lower_node(this.docview.currnode, true);
        if (newnode && newnode !== this.docview.model) {
          this.docview.select(newnode, true);
        }
      }
      return false;
    };

    KeyEventer.prototype.cursor_up = function() {
      var newnode;
      if (!this.docview.currnode || this.docview.currviewstate().get('hide')) {
        this.select_first_node();
      } else {
        newnode = this.docview.upper_node(this.docview.currnode, true);
        if (newnode && newnode !== this.docview.model) {
          this.docview.select(newnode, true);
        }
      }
      return false;
    };

    KeyEventer.prototype.enter = function(e) {
      var curridx, newnode, parent;
      parent = this.docview.currnode.parent();
      curridx = parent.child_index(this.docview.currnode);
      newnode = this.docview.model.doc.newnode();
      newnode = this.docview.currnode.add_sibling(newnode, curridx + 1);
      e.preventDefault();
      this.docview.select(newnode);
      return false;
    };

    KeyEventer.prototype.modenter = function(e) {
      var newnode;
      newnode = this.docview.model.doc.newnode();
      newnode = this.docview.currnode.add_child(newnode);
      e.preventDefault();
      this.docview.select(newnode);
      this.docview.currnode = newnode;
      return false;
    };

    return KeyEventer;

  })(BBoilerplate.BasicView);

  Efficiently.DocView = (function(_super) {
    __extends(DocView, _super);

    function DocView() {
      this.unhide = __bind(this.unhide, this);
      this.hide = __bind(this.hide, this);
      this.filterout = __bind(this.filterout, this);
      this.filterin = __bind(this.filterin, this);
      _ref4 = DocView.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    DocView.prototype.initialize = function(options) {
      var view;
      this.nodeviews = {};
      this.viewstates = {};
      this.root = options.root;
      this.model = options.root;
      this.outline_state = 'show_all';
      this.ui_state = 'normal';
      this.docview = this;
      this.viewstate = new Efficiently.OutlineViewState({
        model: this.root
      });
      view = new Efficiently.BasicChildrenView({
        model: this.root,
        viewstate: this.viewstate,
        docview: this,
        nodeview: this
      });
      this.register(this.root.id, this, this.viewstate);
      this.childrenview = view;
      this.render();
      this.currnode = null;
      return this;
    };

    DocView.prototype.filterexpression = function() {
      return this.$el.find('.filter').val();
    };

    DocView.prototype.events = {
      "focusin .filter": "filterin",
      "focusout .filter": "filterout"
    };

    DocView.prototype.filterin = function() {
      console.log('filterin');
      return this.ui_state = 'filter';
    };

    DocView.prototype.filterout = function() {
      console.log('filterout');
      return this.ui_state = 'normal';
    };

    DocView.prototype.delegateEvents = function(events) {
      BBoilerplate.BasicView.prototype.delegateEvents.call(this, events);
      return this;
    };

    DocView.prototype.currview = function() {
      if (this.currnode) {
        return this.nodeviews[this.currnode.id];
      } else {
        return null;
      }
    };

    DocView.prototype.currviewstate = function() {
      return this.viewstates[this.currnode.id];
    };

    DocView.prototype.unselect = function() {
      if (this.currview() && this.currview().contentview) {
        this.currview().contentview.unfocus();
        this.viewstates[this.currnode.id].set({
          select: false,
          edit: false
        });
        return this.currnode = null;
      }
    };

    DocView.prototype.select = function(node, toedit) {
      if (this.currnode !== node) {
        this.unselect();
      }
      this.currnode = node;
      if (_.isUndefined(toedit)) {
        toedit = true;
      }
      this.viewstates[node.id].set({
        select: true,
        edit: toedit
      });
      if (toedit) {
        return this.nodeviews[node.id].$el.find('.outline-input').focus();
      }
    };

    DocView.prototype.render = function() {
      this.$el.html('');
      this.$el.append($("	<div class=\"left\"> Filter:  </div>\n	<div class=\"abox\">\n    <textarea type=\"text\" class=\"left filter textborder\"></textarea>\n  </div>\n  <hr class=\"mainsep\"/>\n<div class=\"searchbox hide\" id=\"searchbox\">\n  <textarea class=\"searchtext\" id=\"searchtext\"></textarea>\n  <div>Alt + [ and Alt + ] to search forward and backwards.  Escape to exit</div>\n</div>"));
      return this.$el.append(this.childrenview.$el);
    };

    DocView.prototype.deregister = function(id) {
      delete this.nodeviews[id];
      delete this.viewstates[id];
    };

    DocView.prototype.register = function(id, view, viewstate) {
      this.nodeviews[id] = view;
      this.viewstates[id] = viewstate;
    };

    DocView.prototype.children = function(node, visible) {
      var children, viewstate,
        _this = this;
      if (!visible) {
        return node.children();
      }
      viewstate = this.viewstates[node.id];
      if (viewstate.get('hide_children')) {
        return [];
      } else {
        children = node.children();
        children = _.filter(children, function(child) {
          return !_this.viewstates[child.id].get('hide');
        });
        return children;
      }
    };

    DocView.prototype.child_index = function(parent, node, visible) {
      var childids, children;
      children = this.children(parent, visible);
      childids = _.map(children, function(x) {
        return x.id;
      });
      return _.indexOf(childids, node.id);
    };

    DocView.prototype.lower_sibling = function(node, visible) {
      var children, curridx, parent;
      parent = node.parent();
      if (!parent) {
        return null;
      }
      curridx = this.child_index(parent, node, visible);
      children = this.children(parent, visible);
      if (curridx < children.length - 1) {
        return children[curridx + 1];
      } else {
        return null;
      }
    };

    DocView.prototype.lower_node = function(node, visible) {
      var children, lower_sibling, nodeiter;
      children = this.children(node, visible);
      if (children.length > 0) {
        return children[0];
      } else {
        nodeiter = node;
        while (true) {
          lower_sibling = this.lower_sibling(nodeiter, visible);
          if (!lower_sibling && nodeiter.id !== this.root.id) {
            nodeiter = nodeiter.parent();
          } else if (!lower_sibling && nodeiter.id === this.root.id) {
            return null;
          } else if (lower_sibling) {
            return lower_sibling;
          }
        }
      }
    };

    DocView.prototype.upper_sibling = function(node, visible) {
      var children, curridx, parent;
      parent = node.parent();
      if (!parent) {
        return null;
      }
      curridx = this.child_index(parent, node, visible);
      children = this.children(parent, visible);
      if (curridx !== 0) {
        return children[curridx - 1];
      } else {
        return null;
      }
    };

    DocView.prototype.bottom_most_descendant = function(node, visible) {
      var children, nodeiter;
      nodeiter = node;
      while (true) {
        children = this.children(nodeiter, visible);
        if (children.length === 0) {
          return nodeiter;
        } else {
          nodeiter = _.last(children);
        }
      }
      return null;
    };

    DocView.prototype.upper_node = function(node, visible) {
      var parent, upper_sibling;
      parent = node.parent();
      upper_sibling = this.upper_sibling(node, visible);
      if (!upper_sibling) {
        return parent;
      } else {
        return this.bottom_most_descendant(upper_sibling, visible);
      }
      return null;
    };

    DocView.prototype.hide = function(node) {
      return this.getviewstate(node.id).set('hide', true);
    };

    DocView.prototype.unhide = function(node) {
      return this.getviewstate(node.id).set('hide', false);
    };

    DocView.prototype.show_children = function(node) {
      var child, children, grandchild, _i, _j, _len, _len1, _ref5;
      children = this.children(node, false);
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        _ref5 = this.children(child, false);
        for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
          grandchild = _ref5[_j];
          this.hide(grandchild);
        }
        this.unhide(child);
      }
      return null;
    };

    DocView.prototype.show_all_children = function(node) {
      node.tree_apply(this.unhide, null);
      return null;
    };

    DocView.prototype.hide_all_children = function(node) {
      var child, children, _i, _len;
      children = this.children(node, false);
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        this.hide(child);
      }
      return null;
    };

    return DocView;

  })(Efficiently.BasicNodeView);

  Efficiently.Document = (function(_super) {
    __extends(Document, _super);

    function Document() {
      _ref5 = Document.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Document.prototype.defaults = {
      title: '',
      todostates: ["TODO", "INPROGRESS", "DONE"],
      todocolors: {
        TODO: 'red',
        INPROGRESS: 'red',
        DONE: 'green'
      }
    };

    Document.prototype.newnode = function(attrs, options) {
      attrs = attrs || {};
      options = options || {};
      attrs.documentid = this.id;
      options.doc = this;
      return Efficiently.outlinenodes.create(attrs, options);
    };

    Document.prototype.initialize = function(attrs, options) {
      Document.__super__.initialize.call(this, attrs, options);
      return this.state_regexp_map = this.make_state_regexp_map();
    };

    Document.prototype.make_state_regexp_map = function() {
      var map, state, _i, _len, _ref6;
      map = {};
      _ref6 = this.get('todostates');
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        state = _ref6[_i];
        map[state] = new RegExp("(^" + state + " )");
      }
      return map;
    };

    return Document;

  })(Efficiently.EfficientlyModel);

  Efficiently.OutlineNode = (function(_super) {
    __extends(OutlineNode, _super);

    function OutlineNode() {
      this.toggle_todo_state = __bind(this.toggle_todo_state, this);
      _ref6 = OutlineNode.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    OutlineNode.prototype.collection_ref = ['Efficiently', 'outlinenodes'];

    OutlineNode.prototype.initialize = function(attrs, options) {
      OutlineNode.__super__.initialize.call(this, attrs, options);
      this.doc = options.doc;
      if (_.isNull(attrs.children)) {
        return this.set('children', []);
      }
    };

    OutlineNode.prototype.defaults = {
      documentids: null,
      text: '',
      parent: null,
      children: null
    };

    OutlineNode.prototype.add_sibling = function(child, index) {
      return this.parent().add_child(child, index);
    };

    OutlineNode.prototype.reorder_child = function(child, index) {
      var children;
      children = this.get('children');
      children = _.filter(children, (function(x) {
        return x !== child.id;
      }));
      children.splice(index, 0, child.id);
      this.set('children', children);
      return this.save();
    };

    OutlineNode.prototype.add_child = function(child, index) {
      var newchildren;
      newchildren = this.get('children').slice(0);
      if (!index) {
        newchildren.push(child.id);
      } else {
        newchildren.splice(index, 0, child.id);
      }
      this.set('children', newchildren);
      child.set('parent', this.id);
      this.save();
      child.save();
      return child;
    };

    OutlineNode.prototype.num_children = function() {
      return this.get('children').length;
    };

    OutlineNode.prototype.child_index = function(child) {
      return _.indexOf(this.get('children'), child.id);
    };

    OutlineNode.prototype.child = function(index) {
      return this.collection.get(this.get('children')[index]);
    };

    OutlineNode.prototype.parent = function() {
      return this.collection.get(this.get('parent'));
    };

    OutlineNode.prototype.children = function() {
      var x;
      return (function() {
        var _i, _len, _ref7, _results;
        _ref7 = this.get('children');
        _results = [];
        for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
          x = _ref7[_i];
          _results.push(this.collection.get(x));
        }
        return _results;
      }).call(this);
    };

    OutlineNode.prototype.remove_child = function(child) {
      var children;
      child.set('parent', null);
      child.save();
      children = this.get('children');
      children = _.filter(children, (function(x) {
        return x !== child.id;
      }));
      this.set('children', children);
      return this.save();
    };

    OutlineNode.prototype.tree_apply = function(func, level) {
      var child, childid, children, newlevel, _i, _len;
      func(this);
      if (level > 0) {
        newlevel = level - 1;
      } else if (_.isNull(level)) {
        newlevel = null;
      } else {
        return null;
      }
      children = this.get('children');
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        childid = children[_i];
        child = this.collection.get(childid);
        child.tree_apply(func, newlevel);
      }
      return null;
    };

    OutlineNode.prototype.toggle_todo_state = function() {
      var curridx, newstate, newtxt, todostate, todostates;
      todostate = Efficiently.parse_text(this.get('text'), this.doc).todo;
      todostates = this.doc.get('todostates');
      curridx = _.indexOf(todostates, todostate);
      if (curridx === todostates.length - 1) {
        newstate = "";
      } else if (curridx < 0) {
        newstate = todostates[0];
      } else {
        newstate = todostates[curridx + 1];
      }
      newtxt = Efficiently.set_text(this.get('text'), this.doc, {
        'todo': newstate
      });
      this.set('text', newtxt);
      this.save();
      return null;
    };

    OutlineNode.prototype.del = function() {
      return this.tree_apply(function(node) {
        node.set('status', 'DELETE');
        return node.save();
      }, null);
    };

    return OutlineNode;

  })(Efficiently.EfficientlyModel);

  Efficiently.OutlineNodes = (function(_super) {
    __extends(OutlineNodes, _super);

    function OutlineNodes() {
      this._sync_all = __bind(this._sync_all, this);
      _ref7 = OutlineNodes.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    OutlineNodes.prototype.initialize = function() {
      this.storage = {};
      return this.sync_all = _.throttle(this._sync_all, 3000);
    };

    OutlineNodes.prototype.model = Efficiently.OutlineNode;

    OutlineNodes.prototype.url = '';

    OutlineNodes.prototype._sync_all = function() {
      var id, model, saveurl, tosave, _ref8;
      tosave = {
        'outline': {}
      };
      _ref8 = this.storage;
      for (id in _ref8) {
        if (!__hasProp.call(_ref8, id)) continue;
        model = _ref8[id];
        tosave.outline[id] = model;
        delete this.storage[id];
      }
      saveurl = "/bulk/" + window.doc_id;
      console.log('sync', JSON.stringify(tosave));
      return $.post(saveurl, {
        'data': JSON.stringify(tosave)
      }).error(function() {
        var _ref9, _results;
        _ref9 = tosave.outline;
        _results = [];
        for (id in _ref9) {
          if (!__hasProp.call(_ref9, id)) continue;
          model = _ref9[id];
          _results.push(this.storage[id] = this.get(id));
        }
        return _results;
      });
    };

    return OutlineNodes;

  })(Backbone.Collection);

  Efficiently.outlinenodes = new Efficiently.OutlineNodes();

  $(function() {
    Efficiently.main_node_template = _.template($('#main-template').html());
    return Efficiently.children_node_template = _.template($('#children-template').html());
  });

  Efficiently.BasicNodeContentView = (function(_super) {
    __extends(BasicNodeContentView, _super);

    function BasicNodeContentView() {
      this.render_text = __bind(this.render_text, this);
      this.setup_autoresize = __bind(this.setup_autoresize, this);
      this.render_select = __bind(this.render_select, this);
      _ref8 = BasicNodeContentView.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    BasicNodeContentView.prototype.initialize = function(options) {
      BasicNodeContentView.__super__.initialize.call(this, options);
      console.log('content viewstate edit', options.viewstate.get('edit'));
      window.viewstate = options.viewstate;
      console.log('content viewstate anyhidden', options.viewstate.get('any_hidden'));
      this.viewstate = options.viewstate;
      this.docview = options.docview;
      return this.render();
    };

    BasicNodeContentView.prototype.delegateEvents = function(events) {
      BasicNodeContentView.__super__.delegateEvents.call(this, events);
      BBoilerplate.safebind(this, this.model, "change:text", this.render_text);
      BBoilerplate.safebind(this, this.viewstate, "change:edit", this.render_text);
      BBoilerplate.safebind(this, this.viewstate, "change:select", this.render_select);
      BBoilerplate.safebind(this, this.viewstate, "change:any_hidden", this.render);
      BBoilerplate.safebind(this, this.model.doc, "change:todostates", this.render);
      BBoilerplate.safebind(this, this.model.doc, "change:todocolors", this.render);
      return this;
    };

    BasicNodeContentView.prototype.events = {
      'click': 'select'
    };

    BasicNodeContentView.prototype.select = function(toedit) {
      if (_.isUndefined(toedit)) {
        toedit = true;
      }
      return this.docview.select(this.model, true);
    };

    BasicNodeContentView.prototype.unfocus = function() {
      return this.save();
    };

    BasicNodeContentView.prototype.save = function() {
      var newval, oldval;
      newval = this.$el.find('.outline-input').val();
      oldval = this.model.get('text');
      if (oldval !== newval) {
        if (this.viewstate.get('edit')) {
          this.model.set('text', newval, {
            'silent': true
          });
        } else {
          this.model.set('text', newval);
        }
        return this.model.save();
      }
    };

    BasicNodeContentView.prototype.render_select = function() {
      if (this.viewstate.get('select')) {
        this.$el.addClass("shade");
      } else {
        this.$el.removeClass("shade");
      }
      return null;
    };

    BasicNodeContentView.prototype.setup_autoresize = function() {
      var node;
      node = this.$el.find('textarea');
      node.height(0);
      return node.autoResize();
    };

    BasicNodeContentView.prototype.render_text = function() {
      var escapedtext, html, node, text;
      text = this.mget('text');
      escapedtext = _.escape(text);
      html = Efficiently.format_text(escapedtext, this.model.doc);
      this.$el.find(".outline-textdisplay").html(html);
      node = this.$el.find('textarea');
      node.val(text);
      if (this.viewstate.get('edit')) {
        this.$el.find('.outline-input').focus();
        this.$el.find('.outline-textdisplay').addClass('hide');
        return this.$el.find('.outline-input').removeClass('hide');
      } else {
        this.$el.find('.outline-textdisplay').removeClass('hide');
        return this.$el.find('.outline-input').addClass('hide');
      }
    };

    BasicNodeContentView.prototype.render = function(options) {
      console.log('node exit2');
      return;
      this.$el.html(Efficiently.main_node_template({
        chidden: this.viewstate.get('any_hidden'),
        edit: this.viewstate.get('edit')
      }));
      this.$el.addClass("content clearfix");
      this.render_select();
      this.render_text();
      return this.setup_autoresize();
    };

    return BasicNodeContentView;

  })(BBoilerplate.BasicView);

  window.rendertimes = 0;

  Efficiently.BasicChildrenView = (function(_super) {
    __extends(BasicChildrenView, _super);

    function BasicChildrenView() {
      _ref9 = BasicChildrenView.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    BasicChildrenView.prototype.initialize = function(options) {
      BasicChildrenView.__super__.initialize.call(this, options);
      this.viewstate = options.viewstate;
      this.docview = options.docview;
      this.nodeview = options.nodeview;
      this.views = {};
      console.log('rendering');
      this.render();
      return console.log('rendered');
    };

    BasicChildrenView.prototype.delegateEvents = function(events) {
      BasicChildrenView.__super__.delegateEvents.call(this, events);
      BBoilerplate.safebind(this, this.model, "change:children", this.render);
      return this;
    };

    BasicChildrenView.prototype.build_views = function(options) {
      var child_refs, children, model,
        _this = this;
      children = this.model.children();
      child_refs = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          model = children[_i];
          _results.push(model.ref());
        }
        return _results;
      })();
      return BBoilerplate.build_views(this.views, child_refs, function(ref) {
        return _this.nodeview.make_view(_this.model.resolve_ref(ref));
      });
    };

    BasicChildrenView.prototype.render = function() {
      var child_container, childid, key, view, _i, _len, _ref10, _ref11, _results;
      this.build_views();
      this.viewstate.set_child_viewstates(_.map(this.views, (function(x) {
        return x.viewstate;
      })));
      _ref10 = this.views;
      for (key in _ref10) {
        if (!__hasProp.call(_ref10, key)) continue;
        view = _ref10[key];
        view.$el.detach();
      }
      this.$el.html('');
      this.$el.addClass("childrenview clearfix");
      this.$el.html(Efficiently.children_node_template({}));
      child_container = this.$el.find('.children');
      _ref11 = this.mget('children');
      _results = [];
      for (_i = 0, _len = _ref11.length; _i < _len; _i++) {
        childid = _ref11[_i];
        _results.push(child_container.append(this.views[childid].$el));
      }
      return _results;
    };

    return BasicChildrenView;

  })(BBoilerplate.BasicView);

  Efficiently.format_text = function(text, document) {
    var color, html, key, regexp, _ref10;
    _ref10 = document.state_regexp_map;
    for (key in _ref10) {
      if (!__hasProp.call(_ref10, key)) continue;
      regexp = _ref10[key];
      if (text.match(regexp)) {
        color = document.get('todocolors')[key];
        html = "<span style='color:" + color + "'>" + key + " </span>";
        text = text.replace(regexp, html);
      }
    }
    text = text.replace(/(^|\s)#(\w+)/g, "$1<span class='hashtag'>#$2</span>");
    text = text.replace(/(^|\s)@(\w+)/g, "$1<span class='hashtag'>@$2</span>");
    return text;
  };

  Efficiently.parse_text = function(text, document) {
    var data, key, regexp, _ref10;
    data = {};
    data['text'] = text;
    _ref10 = document.state_regexp_map;
    for (key in _ref10) {
      if (!__hasProp.call(_ref10, key)) continue;
      regexp = _ref10[key];
      if (text.match(regexp)) {
        data['todo'] = key;
      }
    }
    return data;
  };

  Efficiently.set_text = function(text, document, data) {
    var key, newval, regexp, set, _ref10;
    if (!_.isUndefined(data.todo)) {
      if (data.todo) {
        newval = data.todo + " ";
      } else {
        newval = data.todo;
      }
      set = false;
      _ref10 = document.state_regexp_map;
      for (key in _ref10) {
        if (!__hasProp.call(_ref10, key)) continue;
        regexp = _ref10[key];
        if (text.match(regexp)) {
          text = text.replace(regexp, newval);
          set = true;
        }
      }
      if (!set) {
        text = "" + newval + text;
      }
    }
    return text;
  };

  Efficiently.tree_filter = function(expression, docview) {
    var egraph, f, regexes;
    docview.show_all_children(docview.model);
    if (!expression) {
      return false;
    }
    egraph = Efficiently.expression_graph(expression);
    regexes = [new RegExp("/(^|\s)@(\w+)/g"), new RegExp(/(^|\s)#(\w+)/g)];
    regexes = regexes.concat(_.values(docview.model.doc.state_regexp_map));
    f = function(node, tags_found) {
      var children_matched, matched;
      console.log(node.get('text'), tags_found);
      _.extend(tags_found, Efficiently.get_tags(node.get('text'), regexes));
      matched = Efficiently.eval_expression_graph(egraph, node.get('text'), tags_found);
      children_matched = _.map(node.children(), function(child) {
        return f(child, _.clone(tags_found));
      });
      if (!_.any(children_matched) && !matched) {
        docview.hide(node);
        return false;
      } else {
        docview.unhide(node);
        return true;
      }
    };
    return f(docview.model, {});
  };

  Efficiently.WSOutlineCache = (function() {
    function WSOutlineCache(collection, doc) {
      this.update_collection = __bind(this.update_collection, this);
      this.dependencies_met = __bind(this.dependencies_met, this);
      this.getnode = __bind(this.getnode, this);
      this.collection = collection;
      this.doc = doc;
      this.nodecache = {};
      this.nodestatus = {};
    }

    WSOutlineCache.prototype.getnode = function(id) {
      if (this.nodecache[id]) {
        return this.nodecache[id];
      }
    };

    WSOutlineCache.prototype.addnode = function(nodes) {
      var node, _i, _len;
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        this.nodecache[node.id] = node;
      }
      return null;
    };

    WSOutlineCache.prototype.dependencies_met = function(nodeid) {
      var node,
        _this = this;
      if (this.collection.get(nodeid)) {
        return true;
      }
      node = this.nodecache[nodeid];
      if (!node) {
        return false;
      }
      if (_.all(node.children, function(childid) {
        return _this.dependencies_met(childid);
      })) {
        return true;
      } else {
        return false;
      }
    };

    WSOutlineCache.prototype.update_collection = function() {
      var id, key, node, tochange, _i, _len, _ref10, _results;
      console.log('update', this.nodecache);
      tochange = [];
      _ref10 = this.nodecache;
      for (key in _ref10) {
        if (!__hasProp.call(_ref10, key)) continue;
        node = _ref10[key];
        if (this.dependencies_met(node.id)) {
          tochange.push(key);
          delete this.nodecache[key];
          if (Efficiently.outlinenodes.get(key)) {
            Efficiently.outlinenodes.get(key).set(node, {
              silent: true
            });
          } else {
            node = new Efficiently.OutlineNode(node, {
              'doc': this.doc
            });
            Efficiently.outlinenodes.add(node);
          }
        }
      }
      _results = [];
      for (_i = 0, _len = tochange.length; _i < _len; _i++) {
        id = tochange[_i];
        _results.push(Efficiently.outlinenodes.get(id).change());
      }
      return _results;
    };

    return WSOutlineCache;

  })();

}).call(this);
