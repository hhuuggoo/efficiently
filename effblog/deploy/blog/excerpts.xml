<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>
        BASIC blog excerpts feed    </title>
        <link href="/blog/excerpts.xml" rel="self" />
    
        <link href="/"/>
    
        
    <updated>2013-08-20T05:21:42Z</updated>

    <id>/blog/excerpts.xml/</id>

            <entry>
            <title type="html">Integrating Stripe Checkout with Mongodb and Flask</title>
            <author><name>Lakshmi Vyasarajan</name></author>
            <link href="/blog/stripe_checkout.html"/>
            <updated>2013-08-13T10:00:00Z</updated>
            <published>2013-08-13T10:00:00Z</published>
            <id>/blog/stripe_checkout.html</id>
                        <category   scheme="/blog/tags"
                        term="development"
                        label="Development" />
            
            <content type="html">
                
                &lt;p&gt;I&amp;#8217;ve been working on Efficently in my spare time for a few years now, it started as a tool for my own personal use, however now that it&amp;#8217;s relatively mature, I wanted to spend some minimal effort to see if I could monetize it. I&amp;#8217;ve used stripe before, and always loved it&amp;#8217;s easy to use &lt;span class=&#34;caps&#34;&gt;API&lt;/span&gt;.
In the past I&amp;#8217;ve always written my own forms but writing the input validation for credit card forms can be quite a pain.  I was thrilled when I saw that stripe now has their &lt;a href=&#34;https://stripe.com/docs/checkout&#34;&gt;own credit card forms&lt;/a&gt;  that you can use easily from your&amp;nbsp;application.&lt;/p&gt;
&lt;h3 class=&#34;heading&#34;&gt; Adding a payment&amp;nbsp;widget &lt;/h3&gt;

&lt;p&gt;The first thing I wanted to do, was add an upgrade form in the main user interface to make it easy for people to upgrade their&amp;nbsp;accounts.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;/media/images/effpaymentnavbar.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Clicking on the Upgrade button pops up a modal dialog where the user can input their credit card information.  Stripe handles all input validation and displays nice error messages if there are problems with any of the&amp;nbsp;inputs.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;/media/images/effmodalpayment.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;After entering valid credit card information, The user is&amp;nbsp;upgraded!&lt;/p&gt;
&lt;h3 class=&#34;heading&#34;&gt; How does it&amp;nbsp;work? &lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You add stripe&amp;#8217;s payment button into a form on your&amp;nbsp;page&lt;/li&gt;
&lt;li&gt;When the user completes stripe&amp;#8217;s dialog, that button is converted
  into a hidden input in your form with the stripe&amp;nbsp;token&lt;/li&gt;
&lt;li&gt;Stripe also submits your form for you, using the url you have in your &lt;code&gt;/action&lt;/code&gt;
  attribute&lt;/li&gt;
&lt;li&gt;Your server needs to have the normal stripe code for making the appropriate
charges with that stripe&amp;nbsp;token.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the html for adding the payment widget into my&amp;nbsp;page.&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;form-inline inlineupgrade&amp;quot;&lt;/span&gt; &lt;br /&gt;      &lt;span class=&#34;na&#34;&gt;action=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/settings/upgrade&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;method=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;span class=&#34;caps&#34;&gt;POST&lt;/span&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;input-small&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;optionsplan&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;$5/month&lt;span class=&#34;nt&#34;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;yearly&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;$20/year&lt;span class=&#34;nt&#34;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;value=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://checkout.stripe.com/v2/checkout.js&amp;quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&#34;na&#34;&gt;class=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;stripe-button&amp;quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&#34;na&#34;&gt;data-key=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{ { key } }&amp;quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&#34;na&#34;&gt;data-panel-label=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Upgrade&amp;quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&#34;na&#34;&gt;data-label=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Upgrade&amp;quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;whyupgrade&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Why Upgrade?&lt;span class=&#34;nt&#34;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;&lt;span class=&#34;caps&#34;&gt;HTML&lt;/span&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;p&gt;The relevant snippet is the script tag, which loads &lt;code&gt;checkout.js&lt;/code&gt;.  The most important functional attribute you need is the data-key, which should be the stripe public key.  Everything else controls the styling of stripe&amp;#8217;s payment button and credit card&amp;nbsp;dialog.&lt;/p&gt;
&lt;h3 class=&#34;heading&#34;&gt; Stripe on the&amp;nbsp;server  &lt;/h3&gt;

&lt;p&gt;Once the user submits the form, the server needs to look at the stripe token, and 
charge the user.  I&amp;#8217;m using python/flask on the server, with mongodb as my storage&amp;nbsp;engine.&lt;/p&gt;
&lt;p&gt;When the user completes stripe&amp;#8217;s payment, I receive an &lt;span class=&#34;caps&#34;&gt;HTTP&lt;/span&gt; post with 2 parameters, &lt;code&gt;stripeToken&lt;/code&gt; and &lt;code&gt;optionsplan&lt;/code&gt;.  &lt;code&gt;stripeToken&lt;/code&gt; is injected by stripe by their library, and &lt;code&gt;optionsplan&lt;/code&gt; is an input that exists inside my html form, since my service 
supports both a monthly and an annual plan. 
The first thing I do, is use stripe to create a stripe user, and store it&amp;#8217;s &lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt; inside mongo.  You&amp;#8217;ll notice that I store stripe&amp;#8217;s customer &lt;span class=&#34;caps&#34;&gt;ID&lt;/span&gt; inside my user so that I can join the 2 sets of information&amp;nbsp;later.&lt;/p&gt;
&lt;div class=&#34;codebox&#34;&gt;&lt;figure class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;find_one&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;session&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)})&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stripe_customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;stripeToken&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;stripe_customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;n&#34;&gt;stripe_cust_id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;stripe_customer&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stripe_cust_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stripe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Customer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;retrieve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stripe_cust_id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;elif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stripe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Customer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;br /&gt;        &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;_id&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]},&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;$set&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;stripe_customer&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]}},&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;n&#34;&gt;safe&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;br /&gt;            &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;&lt;figcaption&gt;Python&lt;/figcaption&gt;&lt;/figure&gt;&lt;/div&gt;            </content>
        </entry>
    </feed>